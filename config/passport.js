// Generated by CoffeeScript 1.7.1
(function() {
  var LocalStrategy, User;

  LocalStrategy = require('passport-local').Strategy;

  User = require('../app/models/user');

  module.exports = function(passport) {
    passport.serializeUser(function(user, done) {
      return done(null, user.id);
    });
    passport.deserializeUser(function(id, done) {
      return User.findById(id, function(err, user) {
        return done(err, user);
      });
    });
    passport.use('login', new LocalStrategy({
      usernameField: 'email',
      passwordField: 'password',
      passReqToCallback: true
    }, function(req, email, password, done) {
      return process.nextTick(function() {
        return User.findOne({
          'email': email
        }, function(err, user) {
          if (err) {
            return done(err);
          }
          if (!user) {
            return done(null, false, req.flash('loginMessage', 'No user found.'));
          }
          if (!user.validPassword(password)) {
            return done(null, false, req.flash('loginMessage', 'Oops! Wrong password.'));
          } else {
            return done(null, user);
          }
        });
      });
    }));
    return passport.use('signup', new LocalStrategy({
      usernameField: 'email',
      passwordField: 'password',
      passReqToCallback: true
    }, function(req, email, password, done) {
      return process.nextTick(function() {
        var user;
        if (!req.user) {
          return User.findOne({
            'email': email
          }, function(err, user) {
            var newUser;
            if (err) {
              return done(err);
            }
            if (user) {
              return done(null, false, req.flash('signupMessage', 'That email is already taken.'));
            } else {
              newUser = new User();
              newUser.email = email;
              newUser.password = newUser.generateHash(password);
              return newUser.save(function(err) {
                if (err) {
                  throw err;
                }
                return done(null, newUser);
              });
            }
          });
        } else {
          user = req.user;
          user.email = email;
          user.password = user.generateHash(password);
          return user.save(function(err) {
            if (err) {
              throw err;
            }
            return done(null, user);
          });
        }
      });
    }));
  };

}).call(this);
