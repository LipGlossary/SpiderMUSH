// Generated by CoffeeScript 1.7.1
(function() {
  var socket, term;

  socket = io.connect();

  term = $.terminal.active();

  socket.on('connecting', function() {
    return console.log('connecting');
  });

  socket.on('connect', function() {
    return console.log('connect');
  });

  socket.on('disconnect', function() {
    return console.log('disconnect');
  });

  socket.on('reconnecting', function() {
    return console.log('reconnecting');
  });

  socket.on('reconnect', function() {
    return console.log('reconnect');
  });

  socket.on('connect_failed', function() {
    return console.log('connect_failed');
  });

  socket.on('reconnect_failed', function() {
    return console.log('reconnect_failed');
  });

  socket.on('error', function(data) {
    var key, msg, value;
    msg = "[[;red;black]ERROR: ";
    for (key in data) {
      value = data[key];
      msg += key + ' : ' + value + '\n';
    }
    return term.echo(msg + ']');
  });

  socket.emit('ready');

  socket.on('reconnect', function() {
    return socket.emit('reconnect');
  });

  socket.on('redirect', function(data) {
    return location.href = data;
  });

  socket.on('tutorial', function() {
    term.pause();
    return $('#tutorial').show();
  });

  socket.on('update', function(user) {
    return $.user = user;
  });

  socket.on('who', function(users) {
    var user, _i, _len, _results;
    $('#who').empty();
    $('#who').append('<p>Online now:</p><ul></ul>');
    _results = [];
    for (_i = 0, _len = users.length; _i < _len; _i++) {
      user = users[_i];
      _results.push($('#who ul').append('<li>' + user + '</li>'));
    }
    return _results;
  });

  socket.on('message', function(message) {
    return term.echo(message);
  });

  socket.on('prompt', function(data) {
    term.echo(data.message);
    term.echo("    [[;gray;black]TIP: Enter \"q\" to cancel.]");
    return term.push(function(input, term) {
      if (data.args == null) {
        data.args = [];
      }
      input = $.terminal.parseArguments(input)[0];
      if (input !== 'q') {
        data.args.push(input);
        socket.emit(data.command, data.args);
      }
      term.pop();
    }, {
      prompt: '? > '
    });
  });

  socket.on('create-char', function() {
    term.pause();
    $('#char-form button[data-cmd="edit"]').hide();
    $('#char-form button[data-cmd="create"]').show();
    return $('#char').show();
  });

  socket.on('edit-char', function(data) {
    term.pause();
    $('#char-form input[name="name"]').val(data.name);
    $('#char-form input[name="list"]').val(data.list);
    $('#char-form textarea[name="look"]').val(data.look);
    $('#char-form input[name="move"]').val(data.move);
    $('#char-form input[name="appear"]').val(data.appear);
    $('#char-form button[data-cmd="create"]').hide();
    $('#char-form button[data-cmd="edit"]').show();
    return $('#char').show();
  });

  socket.on('create-zone', function(data) {
    term.pause();
    $('#zone-form button[data-cmd="edit"]').hide();
    $('#zone-form button[data-cmd="create').show();
    return $('#zone').show();
  });

  socket.on('edit-zone', function(data) {
    var room, zone, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
    term.pause();
    $('#zone-form input[name="name"]').val(data.name);
    if (data["private"] === true) {
      $('#zone-form input[value="private"]').attr('checked', 'checked');
    } else {
      $('#zone-form input[value="public"]').attr('checked', 'checked');
    }
    $('#zone-form input[name="super"]').val((_ref = (_ref1 = data.parent) != null ? _ref1.code : void 0) != null ? _ref : '');
    $('#zone-form button[data-cmd="create"]').hide();
    $('#zone-form button[data-cmd="edit"]').show();
    $('#zone-form div.list').empty();
    if (data.zones.length > 0) {
      $('#zone-form div.list').append('<p>Sub-zones:</p><ul class="zones"></ul>');
      _ref2 = data.zones;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        zone = _ref2[_i];
        $('#zone-form div.list ul.zones').append('<li>' + zone.name + ' (' + zone.code + ')</li>');
      }
    }
    if (data.rooms.length > 0) {
      $('#zone-form div.list').append('<p>Rooms:</p><ul class="rooms"></ul>');
      _ref3 = data.rooms;
      for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
        room = _ref3[_j];
        $('#zone-form div.list ul.rooms').append('<li>' + room.name + ' (' + room.code + ')</li>');
      }
    }
    return $('#zone').show();
  });

  socket.on('ooc', function(data) {
    return term.echo("[[;yellow;black](OOC) " + data.user + ": " + data.message + "]");
  });

}).call(this);
