// Generated by CoffeeScript 1.7.1
(function() {
  var Char, Room, User, Zone;

  User = require('../app/models/user');

  Char = require('../app/models/char');

  Zone = require('../app/models/zone');

  Room = require('../app/models/room');

  module.exports = function() {
    var setupRoom, setupUser, setupZone;
    setupUser = function(done) {
      return User.findOne({
        email: 'admin'
      }).exec(function(err, user1) {
        var user;
        if (err != null) {
          return done(err, null);
        } else if (user1 != null) {
          return done(null, user1);
        } else {
          user = new User;
          user.email = 'admin';
          user.password = user.generateHash('buy me a pretty horse');
          user.currentChar = 0;
          user.visible = false;
          user.room = '000001';
          return user.save(function(err2, user2) {
            if (err2 != null) {
              return done(err2, null);
            } else {
              return Char.create({
                owner: user2._id,
                name: 'Lulu',
                list: 'Lovely Locks',
                look: "It's rude to stare.",
                move: 'wafts',
                appear: 'in a shower of rose petals'
              }, function(err3, char) {
                return user2.addChar(char._id, function(err4, user3) {
                  if (err3 != null) {
                    return done(err3, null);
                  } else {
                    return done(null, user2);
                  }
                });
              });
            }
          });
        }
      });
    };
    setupZone = function(user, done) {
      return Zone.findOne({
        code: '000000'
      }).exec(function(err, zone) {
        if (err != null) {
          return done(err, null, null);
        } else if (zone != null) {
          return done(null, user, zone);
        } else {
          return Zone.create({
            owner: user._id,
            name: 'The Verse',
            code: '000000',
            "private": false
          }, function(err2, zone2) {
            if (err2 != null) {
              return done(err2, null, null);
            } else {
              return done(null, user, zone2);
            }
          });
        }
      });
    };
    setupRoom = function(user, zone, done) {
      return Room.findOne({
        code: '000001'
      }).exec(function(err, room) {
        if (err != null) {
          return done(err);
        } else if (room != null) {
          return done(null);
        } else {
          return Room.create({
            owner: user._id,
            code: '000001',
            name: 'The Dressing Room',
            look: "This long, narrow room resembles a backstage, area, dimly " + "lit with unfinished brick, steel and ductwork painted blac" + "k. Cables, ropes, and wires run from hidden crevace to chi" + "nks in the walls, some working intermittently, some dusty " + "with disuse.\n\nThis isn't to say that the Dressing Room d" + "oesn't have its comforts. The largest stretch of hardwood " + "flooring is covered with a threadbare oriental rug. Two wi" + "de vanities line one wall, and a changing screen is angled" + " into a dark corner. As well as a number of spidery wooden" + " chairs, a well-loved and over-stuffed couch sags beneath " + "the grimy chandelier.",
            "private": false
          }, function(err2, room2) {
            if (err2 != null) {
              return done(err2);
            } else {
              return done(null);
            }
          });
        }
      });
    };
    console.log("Spinning up the world...");
    return setupUser(function(err, user) {
      if (err != null) {
        return console.log(err);
      } else {
        return setupZone(user, function(err2, user2, zone) {
          if (err2 != null) {
            return console.log(err2);
          } else {
            return setupRoom(user2, zone, function(err3) {
              if (err3 != null) {
                return console.log(err3);
              } else {
                return console.log("OK");
              }
            });
          }
        });
      }
    });
  };

}).call(this);
