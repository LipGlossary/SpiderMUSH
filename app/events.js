// Generated by CoffeeScript 1.7.1
(function() {
  var Char, User;

  User = require('../app/models/user');

  Char = require('../app/models/char');

  module.exports = function(app) {
    app.io.route('create', function(req) {
      switch (req.data[0]) {
        case 'char':
          return req.io.emit('create-char');
        case 'room':
          return req.io.emit('message', "I'm sorry, I cannot create rooms at this time.");
        case 'object':
          return req.io.emit('message', "I'm sorry, I cannot creat objects at this time.");
        case void 0:
          return req.io.emit('prompt', {
            message: "What would you like to create?\n    char    room    object",
            command: 'create',
            args: req.data
          });
        default:
          return req.io.emit('message', "I cannot edit \"" + req.data[0] + "\".");
      }
    });
    app.io.route('edit', function(req) {
      switch (req.data[0]) {
        case 'self':
          return "Sorry, I cannot edit characters at this time.";
        case 'char':
          console.log("req.session.passport.user: " + JSON.stringify(req.session.passport.user));
          return User.findById(req.session.passport.user, function(err, data) {
            if (err != null) {
              console.log("ERROR: " + err);
              return req.io.emit('error', err);
            } else {
              if (data.chars.length < 2) {
                return req.io.emit('message', "You don't have any characters to edit.");
              } else {
                return req.io.emit('message', "Sorry, I can't edit characters at this time.");
              }
            }
          });
        case 'room':
          return req.io.emit('message', "Sorry, I can't edit rooms at this time.");
        case 'object':
          return req.io.emit('message', "Sorry, I can't edit objects at this time.");
        case void 0:
          return req.io.emit('prompt', {
            message: 'What would you like to edit?\n    self    char    room    object',
            command: 'edit',
            args: req.data
          });
        default:
          return req.io.emit('message', "I cannot edit \"" + req.data[0] + "\".");
      }
    });
    return app.io.route('create-char', function(req) {
      return User.findById(req.session.passport.user, function(userErr, user) {
        if (userErr != null) {
          return req.io.emit('error', userErr);
        } else {
          user.chars.push({
            name: req.data.name,
            list: req.data.list,
            look: req.data.look,
            move: req.data.move,
            appear: req.data.appear
          });
          return user.save(function(charErr, data) {
            var key, _results;
            if (charErr != null) {
              _results = [];
              for (key in charErr.errors) {
                switch (charErr.errors[key].path) {
                  case 'name':
                    switch (charErr.errors[key].type) {
                      case 'unique':
                        _results.push(req.io.emit('message', "There is already a character with that name."));
                        break;
                      case 'required':
                        _results.push(req.io.emit('message', "The character must have a name."));
                        break;
                      default:
                        _results.push(req.io.emit('error', charErr));
                    }
                    break;
                  case 'list':
                    _results.push(req.io.emit('message', "The character must have a short description (\"list\" command)."));
                    break;
                  case 'look':
                    _results.push(req.io.emit('message', "The character must have a long description (\"look\" command)."));
                    break;
                  case 'move':
                    _results.push(req.io.emit('message', "The character must have a movement description."));
                    break;
                  case 'appear':
                    _results.push(req.io.emit('message', "The character must have a [dis]appearance description."));
                    break;
                  default:
                    _results.push(req.io.emit('error', charErr));
                }
              }
              return _results;
            } else {
              return req.io.emit('message', "The character \"" + req.data.name + "\" was created!");
            }
          });
        }
      });
    });
  };

}).call(this);
