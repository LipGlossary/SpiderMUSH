// Generated by CoffeeScript 1.7.1
(function() {
  var Char, Room, User, Zone, mongoose;

  mongoose = require('mongoose');

  User = require('../app/models/user');

  Char = require('../app/models/char');

  Zone = require('../app/models/zone');

  Room = require('../app/models/room');

  module.exports = function(app) {
    var clients, commands, createChar, createZone, disappear, generateCode, getClients, validateChar;
    clients = [];
    generateCode = function(done) {
      var code;
      code = ('000000' + (Math.random() * 0xFFFFFF << 0).toString(16)).slice(-6);
      return Zone.findOne({
        code: code
      }).exec(function(err, data) {
        if (err != null) {
          return console.log(err);
        } else if (data != null) {
          return generateCode(done);
        } else {
          return done(code);
        }
      });
    };
    commands = {
      'create': {
        'char': function(req) {
          return req.io.emit('create-char');
        },
        'room': function(req) {
          return req.io.emit('message', "I'm sorry, I cannot create rooms at this time.");
        },
        'object': function(req) {
          return req.io.emit('message', "I'm sorry, I cannot creat objects at this time.");
        },
        'zone': function(req) {
          return req.io.emit('create-zone');
        }
      },
      'edit': {
        'self': function(req) {
          return User.findById(req.session.passport.user).exec(function(err, user) {
            if (err != null) {
              return req.io.emit('error', err);
            } else {
              return Char.findById(user.chars[0]).exec(function(err, char) {
                var _ref;
                if (err != null) {
                  return req.io.emit('error', err);
                } else {
                  req.session.editId = (_ref = user.chars[0]._id) != null ? _ref : user.chars[0];
                  return req.io.emit('edit-char', char);
                }
              });
            }
          });
        },
        'char': function(req) {
          if (req.data[1] == null) {
            return User.findById(req.session.passport.user).populate('chars').exec(function(err, user) {
              var char, charList, index, _i, _len, _ref;
              if (user.chars.length < 2) {
                return req.io.emit('message', "You don't have any characters to edit.");
              } else {
                charList = "";
                _ref = user.chars;
                for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
                  char = _ref[index];
                  if (index > 0) {
                    charList += '    ' + char.name;
                  }
                }
                return req.io.emit('prompt', {
                  message: "Which character would you like to edit?\n" + charList,
                  command: 'edit',
                  args: req.data
                });
              }
            });
          } else {
            return Char.findOne({
              name: req.data[1]
            }).exec(function(err, char) {
              if (err != null) {
                return req.io.emit('error', err);
              } else if (char == null) {
                return req.io.emit('message', "Sorry, you can't edit character \"" + req.data[1] + "\".\n    TIP: Did you spell it correctly?\n    TIP: If your character's name has a space in it, you must enclose it in quotes.");
              } else if (char.owner.toString() !== req.session.passport.user) {
                return req.io.emit('message', "Sorry, you don't have permission to edit \"" + req.data[1] + "\".");
              } else {
                req.session.editId = char._id;
                return req.io.emit('edit-char', char);
              }
            });
          }
        },
        'room': function(req) {
          return req.io.emit('message', "Sorry, I can't edit rooms at this time.");
        },
        'object': function(req) {
          return req.io.emit('message', "Sorry, I can't edit objects at this time.");
        },
        'zone': function(req) {
          if (req.data[1] == null) {
            return req.io.emit('prompt', {
              message: "Which zone would you like to edit?",
              command: 'edit',
              args: req.data
            });
          } else {
            return Zone.findOne({
              code: req.data[1]
            }).populate('parent zones rooms').exec(function(err, zone) {
              if (err != null) {
                return req.io.emit('error', err);
              } else if (zone == null) {
                return req.io.emit('message', "Sorry, you cannot edit zone " + req.data[1] + ".");
              } else if (zone.owner.toString() !== req.session.passport.user) {
                return req.io.emit('message', "Sorry, you don't have permission to edit zone " + req.data[1] + ".");
              } else {
                req.session.editId = zone._id;
                console.log(zone);
                return req.io.emit('edit-zone', zone);
              }
            });
          }
        }
      }
    };
    getClients = function(done) {
      return User.find().where('_id')["in"](clients).populate('chars').exec(function(err, users) {
        var list, user, _i, _len, _ref, _ref1;
        if (err != null) {
          return done(err, null);
        } else {
          list = [];
          for (_i = 0, _len = users.length; _i < _len; _i++) {
            user = users[_i];
            list.push((_ref = (_ref1 = user.chars[0]) != null ? _ref1.name : void 0) != null ? _ref : user.email);
          }
          return done(null, list);
        }
      });
    };
    app.io.route('ready', function(req) {
      clients.push(req.session.passport.user);
      return User.findById(req.session.passport.user).populate('chars').exec(function(err, user) {
        if (err != null) {
          return req.io.emit('error', err);
        } else if (user.chars[0] == null) {
          return req.io.emit('tutorial');
        } else {
          req.io.emit('update', user);
          return getClients(function(err, clients) {
            if (err != null) {
              return req.io.emit('error', err);
            } else {
              return app.io.broadcast('who', clients);
            }
          });
        }
      });
    });
    app.io.route('disconnect', function(req) {
      var _ref;
      clients.splice(clients.indexOf((_ref = req.session.passport) != null ? _ref.user : void 0), 1);
      return getClients(function(err, clients) {
        if (err != null) {
          return req.io.emit('error', err);
        } else {
          return app.io.broadcast('who', clients);
        }
      });
    });
    app.io.route('command', function(req) {
      return req.io.emit('message', '\n[[;white;black]COMMAND     ARGUMENTS         DESCRIPTION]\n\ncommand                       List of commands\nhelp                          Launch tutorial page\nproto                         Launch prototype help page\n\nwho                           Get a list of who is online\nooc                           Post to the OOC channel\n\ncreate                        Create anything\n            char              Create a new character\n\nedit                          Edit anything\n            self              Edit your out-of-character self\n            char              Edit a character\n            char, <name>      Edit the character <name>\n\nstatus                        Gives your current character, location, and whether or not you are visible\nvis                           Become visible\ninvis                         Become invisible\nchar                          Switch characters\n            self              "Take off" your character\n            <name>            Switch to character <name>\n\nlook                          Look at the room\n            self              Look at your OOC self\n            me                Look at your current character\n            <name>            Look at character <name> in the room\nlist                          List the contents of the room\n\nsay                           Speak to the room\npose                          Act in the room\nspoof                         Act anonymously in the room\n');
    });
    app.io.route('status', function(req) {
      return User.findById(req.session.passport.user).populate('chars').exec(function(err, user) {
        if (err != null) {
          return emit('error', err);
        } else {
          req.io.emit('message', "Hello, " + user.chars[0].name + ".");
          if (user.currentChar === 0) {
            req.io.emit('message', "You do not have a character active.");
          } else {
            req.io.emit('message', "You are currently masquerading as " + user.chars[user.currentChar].name + ".");
          }
          if (user.visible) {
            req.io.emit('message', "You are visible.");
          } else {
            req.io.emit('message', "You are invisible.");
          }
          return Room.findOne({
            code: user.room
          }).exec(function(err2, room) {
            if (err != null) {
              return emit('error', err2);
            } else {
              return req.io.emit('message', "You are in \"" + room.name + "\".");
            }
          });
        }
      });
    });
    app.io.route('who', function(req) {
      return getClients(function(err, users) {
        var msg, user, _i, _len;
        msg = "[[;white;black]Online now: ]";
        for (_i = 0, _len = users.length; _i < _len; _i++) {
          user = users[_i];
          msg += '\n' + user;
        }
        msg += '\n    ' + "[[;gray;black]TIP: If you don't appear in this list, please refesh your window.]";
        return req.io.emit('message', msg);
      });
    });
    app.io.route('vis', function(req) {
      return User.findById(req.session.passport.user).populate('chars').exec(function(err, user) {
        if (err != null) {
          return req.io.emit('error', err);
        } else if (user.visible === true) {
          return req.io.emit('message', "You are already visible.");
        } else {
          user.visible = true;
          return user.save(function(err2, user2) {
            var char;
            if (err != null) {
              return req.io.emit('error', err2);
            } else {
              req.io.emit('update', user2);
              char = user2.chars[user2.currentChar];
              req.io.emit('message', "[[;white;black]You appear " + char.appear + ".]");
              return req.io.broadcast('message', "[[;white;black]" + char.name + " appears " + char.appear + ".]");
            }
          });
        }
      });
    });
    disappear = function(req, done) {
      return User.findById(req.session.passport.user).populate('chars').exec(function(err, user) {
        if (err != null) {
          return done(err);
        } else if (user.visible === false) {
          req.io.emit('message', "You are already invisible.");
          return done(null);
        } else {
          user.visible = false;
          return user.save(function(err2, user2) {
            var char;
            if (err != null) {
              return done(err2);
            } else {
              req.io.emit('update', user2);
              char = user2.chars[user2.currentChar];
              req.io.emit('message', "[[;white;black]You disappear " + char.appear + ".]");
              req.io.broadcast('message', "[[;white;black]" + char.name + " disappears " + char.appear + ".]");
              return done(null);
            }
          });
        }
      });
    };
    app.io.route('invis', function(req) {
      return disappear(req, function(err) {
        if (err != null) {
          return req.io.emit('error', err);
        }
      });
    });
    app.io.route('char', function(req) {
      return User.findById(req.session.passport.user).populate('chars').exec(function(err, user) {
        var char, index, list, _i, _len, _ref;
        if (req.data[0] == null) {
          list = '    0: ' + user.chars[0].name + ' (self)';
          _ref = user.chars;
          for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
            char = _ref[index];
            if (index > 0) {
              list += '    ' + index + ': ' + char.name;
            }
          }
          return req.io.emit('prompt', {
            message: "Which character would you like to activate? (enter the number)\n" + list,
            command: 'char',
            args: req.data
          });
        } else if (req.data[0] === 'self') {
          return req.data[0] = 0;
        } else if (user.chars[req.data[0]] == null) {
          req.io.emit('message', "Character " + req.data[0] + " does not exist.");
          return req.io.emit('message', "[[;gray;black]    TIP: Use the character's number. Type \"char\" to get a list.");
        } else if (user.currentChar === req.data[0]) {
          return req.io.emit('message', "That character is already active.");
        } else if (user.visible === true) {
          return disappear(req, function(dErr) {
            if (dErr != null) {
              return req.io.emit('error', dErr);
            } else {
              user.currentChar = req.data[0];
              return user.save(function(err2, user2) {
                if (err2 != null) {
                  return req.io.emit('error', err2);
                } else {
                  req.io.emit('update', user2);
                  if (user.currentChar === 0) {
                    return req.io.emit('message', "You are now out of character.");
                  } else {
                    return req.io.emit('message', "You activated character " + user2.chars[user2.currentChar].name + ".");
                  }
                }
              });
            }
          });
        } else {
          user.currentChar = req.data[0];
          return user.save(function(err2, user2) {
            if (err2 != null) {
              return req.io.emit('error', err2);
            } else {
              req.io.emit('update', user2);
              if (user.currentChar === 0) {
                return req.io.emit('message', "You are now out of character.");
              } else {
                return req.io.emit('message', "You activated character " + user2.chars[user2.currentChar].name + ".");
              }
            }
          });
        }
      });
    });
    app.io.route('create', function(req) {
      var _base, _name;
      if (!(typeof (_base = commands['create'])[_name = req.data[0]] === "function" ? _base[_name](req) : void 0)) {
        if (req.data[0] == null) {
          return req.io.emit('prompt', {
            message: "What would you like to create?\n    char    room    object    zone",
            command: 'create',
            args: req.data
          });
        } else {
          return req.io.emit('message', "I cannot edit \"" + req.data[0] + "\".");
        }
      }
    });
    app.io.route('edit', function(req) {
      var _base, _name;
      if (!(typeof (_base = commands['edit'])[_name = req.data[0]] === "function" ? _base[_name](req) : void 0)) {
        if (req.data[0] == null) {
          return req.io.emit('prompt', {
            message: 'What would you like to edit?\n    self    char    room    object',
            command: 'edit',
            args: req.data
          });
        } else {
          return req.io.emit('message', "I cannot edit \"" + req.data[0] + "\".");
        }
      }
    });
    validateChar = function(char, req) {
      var flag;
      flag = true;
      if ((char.name == null) || char.name === '') {
        req.io.emit('message', "The character must have a name.");
        flag = false;
      }
      if ((char.list == null) || char.list === '') {
        req.io.emit('message', "The character must have a short description (\"list\" command).");
        flag = false;
      }
      if ((char.look == null) || char.look === '') {
        req.io.emit('message', "The character must have a long description (\"look\" command).");
        flag = false;
      }
      if ((char.move == null) || char.move === '') {
        req.io.emit('message', "The character must have a movement description.");
        flag = false;
      }
      if ((char.appear == null) || char.appear === '') {
        req.io.emit('message', "The character must have a [dis]appearance description.");
        flag = false;
      }
      return flag;
    };
    createChar = function(char, req, done) {
      return Char.create(char, function(charErr, charData) {
        if (charErr != null) {
          return done(charErr, null);
        } else {
          return User.findById(charData.owner, function(userErr, userData) {
            if (userErr != null) {
              return done(userErr, null);
            } else {
              return userData.addChar(charData._id, function(addErr, addData) {
                if (addErr != null) {
                  return done(addErr, null);
                } else {
                  return addData.populate('chars', function(popErr, popData) {
                    req.io.emit('update', popData);
                    return done(null, charData);
                  });
                }
              });
            }
          });
        }
      });
    };
    app.io.route('create-char', function(req) {
      var newChar;
      newChar = req.data;
      newChar.owner = req.session.passport.user;
      if (validateChar(newChar, req)) {
        return createChar(newChar, req, function(err, data) {
          if (err != null) {
            if (err.code === 11000) {
              return req.io.emit('message', "A character with the name \"" + req.data.name + "\" already exists.");
            } else {
              return req.io.emit('error', err);
            }
          } else {
            return req.io.emit('message', "The character \"" + req.data.name + "\" was created!");
          }
        });
      }
    });
    app.io.route('edit-char', function(req) {
      if (validateChar(req.data, req)) {
        return Char.findByIdAndUpdate(req.session.editId, {
          $set: req.data
        }).exec(function(err, data) {
          if (err != null) {
            if (err.code === 11000) {
              return req.io.emit('message', "A character with that name already exists.");
            } else {
              return req.io.emit('error', err);
            }
          } else {
            req.io.emit('message', "The character \"" + req.data.name + "\" was saved!");
            return User.findById(req.session.passport.user).populate('chars').exec(function(popErr, popData) {
              if (popErr != null) {
                return req.io.emit('error', popErr);
              } else {
                return req.io.emit('update', popData);
              }
            });
          }
        });
      }
    });
    createZone = function(zone, done) {
      return Zone.create(zone, function(zoneErr, newZone) {
        if (zoneErr != null) {
          return done(zoneErr, null);
        } else {
          return newZone.populate('parent', function(popErr, popZone) {
            if (popErr != null) {
              return done(popErr, null);
            } else {
              return popZone.parent.addZone(newZone._id, function(addErr, addZone) {
                if (addErr != null) {
                  return done(addErr, null);
                } else {
                  return done(null, newZone);
                }
              });
            }
          });
        }
      });
    };
    app.io.route('create-zone', function(req) {
      var newZone;
      newZone = req.data;
      newZone.owner = req.session.passport.user;
      if ((newZone.parent == null) || newZone.parent === '') {
        newZone.parent = '000000';
      }
      return Zone.findOne({
        code: newZone.parent
      }).exec(function(err, parent) {
        if (err != null) {
          return req.io.emit('error', err);
        } else if (parent == null) {
          return req.io.emit('message', "That super-zone does not exist.");
        } else {
          newZone.parent = parent._id;
          return generateCode(function(code) {
            newZone.code = code;
            return createZone(newZone, function(saveErr, saveZone) {
              var _ref;
              if (saveErr != null) {
                if (((_ref = saveErr.errors) != null ? _ref.name : void 0) != null) {
                  return req.io.emit('message', "The zone must have a name.");
                } else if (saveErr.code === 11000) {
                  return req.io.emit('message', "A zone with that name already exists.");
                } else {
                  return req.io.emit('error', saveErr);
                }
              } else {
                return req.io.emit('message', "The zone " + req.data.name + " was created!");
              }
            });
          });
        }
      });
    });
    app.io.route('edit-zone', function(req) {
      return req.io.emit('message', "I'm sorry, I cannot edit zones at this time.");
    });
    app.io.route('ooc', function(req) {
      return User.findById(req.session.passport.user).populate('chars').exec(function(err, user) {
        if (typeof err === "function" ? err(req.io.emit('error', err)) : void 0) {

        } else {
          return app.io.broadcast('ooc', {
            user: user.chars[0].name,
            message: req.data
          });
        }
      });
    });
    app.io.route('say', function(req) {
      return User.findById(req.session.passport.user).populate('chars').exec(function(err, user) {
        if (err != null) {
          return req.io.emit('error', err);
        } else if (user.visible === false) {
          return req.io.emit('message', "You are invisible.");
        } else {
          req.io.emit('say', {
            user: null,
            message: req.data
          });
          return req.io.broadcast('say', {
            user: user.chars[user.currentChar].name,
            message: req.data
          });
        }
      });
    });
    app.io.route('pose', function(req) {
      return User.findById(req.session.passport.user).populate('chars').exec(function(err, user) {
        if (err != null) {
          return req.io.emit('error', err);
        } else if (user.visible === false) {
          return req.io.emit('message', "You are invisible.");
        } else {
          return app.io.broadcast('pose', {
            user: user.chars[user.currentChar].name,
            message: req.data
          });
        }
      });
    });
    return app.io.route('spoof', function(req) {
      return User.findById(req.session.passport.user).populate('chars').exec(function(err, user) {
        if (err != null) {
          return req.io.emit('error', err);
        } else if (user.visible === false) {
          return req.io.emit('message', "You are invisible.");
        } else {
          return app.io.broadcast('spoof', {
            user: user.chars[user.currentChar].name,
            message: req.data
          });
        }
      });
    });
  };

}).call(this);
