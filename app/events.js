// Generated by CoffeeScript 1.7.1
(function() {
  var Char, User, mongoose;

  mongoose = require('mongoose');

  User = require('../app/models/user');

  Char = require('../app/models/char');

  module.exports = function(app) {
    app.io.route('create', function(req) {
      switch (req.data[0]) {
        case 'char':
          return req.io.emit('create-char');
        case 'room':
          return req.io.emit('message', "I'm sorry, I cannot create rooms at this time.");
        case 'object':
          return req.io.emit('message', "I'm sorry, I cannot creat objects at this time.");
        case void 0:
          return req.io.emit('prompt', {
            message: "What would you like to create?\n    char    room    object",
            command: 'create',
            args: req.data
          });
        default:
          return req.io.emit('message', "I cannot edit \"" + req.data[0] + "\".");
      }
    });
    app.io.route('edit', function(req) {
      switch (req.data[0]) {
        case 'self':
          return User.findById(req.session.passport.user).exec(function(err, user) {
            if (err != null) {
              return req.io.emit('error', err);
            } else {
              return Char.findById(user.chars[0]).exec(function(err, char) {
                var _ref;
                if (err != null) {
                  return req.io.emit('error', err);
                } else {
                  req.session.editId = (_ref = user.chars[0]._id) != null ? _ref : user.chars[0];
                  return req.io.emit('edit-char', char);
                }
              });
            }
          });
        case 'char':
          return User.findById(req.session.passport.user).exec(function(err, user) {
            if (err != null) {
              return req.io.emit('error', err);
            } else if (user.chars.length < 2) {
              return req.io.emit('message', "You don't have any characters to edit.");
            } else {
              return user.populate('chars', function(err, user) {
                var char, charList, index, _i, _j, _len, _len1, _ref, _ref1;
                if (err != null) {
                  return req.io.emit('error', err);
                } else if (req.data[1] == null) {
                  charList = "";
                  _ref = user.chars;
                  for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
                    char = _ref[index];
                    if (index > 0) {
                      charList += "    " + char.name;
                    }
                  }
                  return req.io.emit('prompt', {
                    message: 'Which character would you like to edit?\n' + charList,
                    command: 'edit',
                    args: req.data
                  });
                } else {
                  _ref1 = user.chars;
                  for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
                    char = _ref1[index];
                    if (char.name === req.data[1]) {
                      req.session.editId = char._id;
                      req.io.emit('edit-char', char);
                      return;
                    }
                  }
                  return req.io.emit('message', "Sorry, you can't edit character \"" + req.data[1] + "\".\n    TIP: Did you spell it correctly?\n    TIP: If your character's name has a space in it, you must enclose it in quotes.");
                }
              });
            }
          });
        case 'room':
          return req.io.emit('message', "Sorry, I can't edit rooms at this time.");
        case 'object':
          return req.io.emit('message', "Sorry, I can't edit objects at this time.");
        case void 0:
          return req.io.emit('prompt', {
            message: 'What would you like to edit?\n    self    char    room    object',
            command: 'edit',
            args: req.data
          });
        default:
          return req.io.emit('message', "I cannot edit \"" + req.data[0] + "\".");
      }
    });
    app.io.route('create-char', function(req) {
      var newChar;
      newChar = {
        name: req.data.name,
        list: req.data.list,
        look: req.data.look,
        move: req.data.move,
        appear: req.data.appear
      };
      return Char.create(newChar, function(charErr, charData) {
        var key, value, _ref, _results;
        if (charErr != null) {
          _ref = charErr.errors;
          _results = [];
          for (key in _ref) {
            value = _ref[key];
            switch (value.path) {
              case 'name':
                switch (value.type) {
                  case 'unique':
                    _results.push(req.io.emit('message', "There is already a character with that name."));
                    break;
                  case 'required':
                    _results.push(req.io.emit('message', "The character must have a name."));
                    break;
                  default:
                    _results.push(req.io.emit('error', charErr));
                }
                break;
              case 'list':
                _results.push(req.io.emit('message', "The character must have a short description (\"list\" command)."));
                break;
              case 'look':
                _results.push(req.io.emit('message', "The character must have a long description (\"look\" command)."));
                break;
              case 'move':
                _results.push(req.io.emit('message', "The character must have a movement description."));
                break;
              case 'appear':
                _results.push(req.io.emit('message', "The character must have a [dis]appearance description."));
                break;
              default:
                _results.push(req.io.emit('error', charErr));
            }
          }
          return _results;
        } else {
          return User.findByIdAndUpdate(req.session.passport.user, {
            $push: {
              chars: charData._id
            }
          }).exec(function(userErr, userData) {
            if (userErr != null) {
              return req.io.emit('error', userErr);
            } else {
              return req.io.emit('message', "The character \"" + req.data.name + "\" was created!");
            }
          });
        }
      });
    });
    return app.io.route('edit-char', function(req) {
      return Char.findByIdAndUpdate(req.session.editId, {
        $set: {
          name: req.data.name,
          list: req.data.list,
          look: req.data.look,
          move: req.data.move,
          appear: req.data.appear
        }
      }).exec(function(err, data) {
        var key, value, _ref, _results;
        if (err != null) {
          _ref = err.errors;
          _results = [];
          for (key in _ref) {
            value = _ref[key];
            switch (value.path) {
              case 'name':
                switch (value.type) {
                  case 'unique':
                    _results.push(req.io.emit('message', "There is already a character with that name."));
                    break;
                  case 'required':
                    _results.push(req.io.emit('message', "The character must have a name."));
                    break;
                  default:
                    _results.push(req.io.emit('error', err));
                }
                break;
              case 'list':
                _results.push(req.io.emit('message', "The character must have a short description (\"list\" command)."));
                break;
              case 'look':
                _results.push(req.io.emit('message', "The character must have a long description (\"look\" command)."));
                break;
              case 'move':
                _results.push(req.io.emit('message', "The character must have a movement description."));
                break;
              case 'appear':
                _results.push(req.io.emit('message', "The character must have a [dis]appearance description."));
                break;
              default:
                _results.push(req.io.emit('error', err));
            }
          }
          return _results;
        } else {
          return req.io.emit('message', "The character \"" + req.data.name + "\" was saved!");
        }
      });
    });
  };

}).call(this);
