// Generated by CoffeeScript 1.7.1
(function() {
  var Char, User, mongoose;

  mongoose = require('mongoose');

  User = require('../app/models/user');

  Char = require('../app/models/char');

  module.exports = function(app) {
    var charErrors, commands;
    commands = {
      'create': {
        'char': function(req) {
          return req.io.emit('create-char');
        },
        'room': function(req) {
          return req.io.emit('message', "I'm sorry, I cannot create rooms at this time.");
        },
        'object': function(req) {
          return req.io.emit('message', "I'm sorry, I cannot creat objects at this time.");
        }
      },
      'edit': {
        'self': function(req) {
          return User.findById(req.session.passport.user).exec(function(err, user) {
            if (err != null) {
              return req.io.emit('error', err);
            } else {
              return Char.findById(user.chars[0]).exec(function(err, char) {
                var _ref;
                if (err != null) {
                  return req.io.emit('error', err);
                } else {
                  req.session.editId = (_ref = user.chars[0]._id) != null ? _ref : user.chars[0];
                  return req.io.emit('edit-char', char);
                }
              });
            }
          });
        },
        'char': function(req) {
          if (req.data[1] == null) {
            return User.findById(req.session.passport.user).populate('chars').exec(function(err, user) {
              var char, charList, index, _i, _len, _ref;
              if (user.chars.length < 2) {
                return req.io.emit('message', "You don't have any characters to edit.");
              } else {
                charList = "";
                _ref = user.chars;
                for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
                  char = _ref[index];
                  if (index > 0) {
                    charList += '    ' + char.name;
                  }
                }
                return req.io.emit('prompt', {
                  message: "Which character would you like to edit?\n" + charList,
                  command: 'edit',
                  args: req.data
                });
              }
            });
          } else {
            return Char.findOne({
              name: req.data[1]
            }).exec(function(err, char) {
              if (char == null) {
                return req.io.emit('message', "Sorry, you can't edit character \"" + req.data[1] + "\".\n    TIP: Did you spell it correctly?\n    TIP: If your character's name has a space in it, you must enclose it in quotes.");
              } else if (char.owner.toString() !== req.session.passport.user) {
                return req.io.emit('message', "Sorry, you don't have permission to edit \"" + req.data[1] + "\".");
              } else {
                req.session.editId = char._id;
                return req.io.emit('edit-char', char);
              }
            });
          }
        },
        'room': function(req) {
          return req.io.emit('message', "Sorry, I can't edit rooms at this time.");
        },
        'object': function(req) {
          return req.io.emit('message', "Sorry, I can't edit objects at this time.");
        }
      }
    };
    app.io.route('help', function(req) {
      return req.io.emit('message', '\n[[;white;black]COMMAND     ARGUMENTS         DESCRIPTION]\n\nhelp        N/A               List of commands\n\ncreate                        Create anything\n            char              Create a new character\n            room              Create a new room\n            object            Create a new object\n\nedit                          Edit anything\n            self              Edit your out-of-character self\n            char              Edit a characters\n            char, <name>      Edit the character <name>\n            room              Edit a room\n\n[[;blue;black]Coming soon...]\n\n[[;white;black]COMMAND     ARGUMENTS         DESCRIPTION]\n\nedit        room, <code>      Edit room <code>\n            object            Edit an object\n            object, <code>    Edit object <code>\n');
    });
    app.io.route('create', function(req) {
      var _base, _name;
      if (!(typeof (_base = commands['create'])[_name = req.data[0]] === "function" ? _base[_name](req) : void 0)) {
        if (req.data[0] == null) {
          return req.io.emit('prompt', {
            message: "What would you like to create?\n    char    room    object",
            command: 'create',
            args: req.data
          });
        } else {
          return req.io.emit('message', "I cannot edit \"" + req.data[0] + "\".");
        }
      }
    });
    app.io.route('edit', function(req) {
      var _base, _name;
      if (!(typeof (_base = commands['edit'])[_name = req.data[0]] === "function" ? _base[_name](req) : void 0)) {
        if (req.data[0] != null) {
          return req.io.emit('prompt', {
            message: 'What would you like to edit?\n    self    char    room    object',
            command: 'edit',
            args: req.data
          });
        } else {
          return req.io.emit('message', "I cannot edit \"" + req.data[0] + "\".");
        }
      }
    });
    charErrors = {
      'name': function(err, req) {
        return req.io.emit('message', "The character must have a name.");
      },
      'list': function(err, req) {
        return req.io.emit('message', "The character must have a short description (\"list\" command).");
      },
      'look': function(err, req) {
        return req.io.emit('message', "The character must have a long description (\"look\" command).");
      },
      'move': function(err, req) {
        return req.io.emit('message', "The character must have a movement description.");
      },
      'appear': function(err, req) {
        return req.io.emit('message', "The character must have a [dis]appearance description.");
      }
    };
    app.io.route('create-char', function(req) {
      var newChar;
      newChar = {
        owner: req.session.passport.user,
        name: req.data.name,
        list: req.data.list,
        look: req.data.look,
        move: req.data.move,
        appear: req.data.appear
      };
      return Char.create(newChar, function(charErr, charData) {
        var key, _results;
        if (charErr != null) {
          if (charErr.code === 11000) {
            req.io.emit('message', "A character with that name already exists.");
          }
          _results = [];
          for (key in charErr.errors) {
            if (!(typeof charErrors[key] === "function" ? charErrors[key](charErr, req) : void 0)) {
              _results.push(req.io.emit('error', charErr));
            }
          }
          return _results;
        } else {
          return User.findByIdAndUpdate(req.session.passport.user, {
            $push: {
              chars: charData._id
            }
          }).exec(function(userErr, userData) {
            if (userErr != null) {
              return req.io.emit('error', userErr);
            } else {
              return req.io.emit('message', "The character \"" + req.data.name + "\" was created!");
            }
          });
        }
      });
    });
    app.io.route('edit-char', function(req) {
      return Char.findByIdAndUpdate(req.session.editId, {
        $set: {
          name: req.data.name,
          list: req.data.list,
          look: req.data.look,
          move: req.data.move,
          appear: req.data.appear
        }
      }).exec(function(err, data) {
        var key, _results;
        if (err != null) {
          if (err.code === 11000) {
            req.io.emit('message', "A character with that name already exists.");
          }
          _results = [];
          for (key in err.errors) {
            if (!(typeof charErrors[key] === "function" ? charErrors[key](err, req) : void 0)) {
              _results.push(req.io.emit('error', err));
            }
          }
          return _results;
        } else {
          return req.io.emit('message', "The character \"" + req.data.name + "\" was saved!");
        }
      });
    });
    return app.io.route('ooc', function(req) {
      return User.findById(req.session.passport.user).populate('chars').exec(function(err, user) {
        if (typeof err === "function" ? err(req.io.emit) : void 0) {

        } else {
          return app.io.broadcast('ooc', {
            user: user.chars[0].name,
            message: req.data
          });
        }
      });
    });
  };

}).call(this);
